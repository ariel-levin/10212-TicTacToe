//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.TTTService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerData", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PlayerData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> AdviseToField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdviseToNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CountryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte IsAdvisorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PhoneField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> AdviseTo {
            get {
                return this.AdviseToField;
            }
            set {
                if ((this.AdviseToField.Equals(value) != true)) {
                    this.AdviseToField = value;
                    this.RaisePropertyChanged("AdviseTo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdviseToName {
            get {
                return this.AdviseToNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AdviseToNameField, value) != true)) {
                    this.AdviseToNameField = value;
                    this.RaisePropertyChanged("AdviseToName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Country {
            get {
                return this.CountryField;
            }
            set {
                if ((object.ReferenceEquals(this.CountryField, value) != true)) {
                    this.CountryField = value;
                    this.RaisePropertyChanged("Country");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte IsAdvisor {
            get {
                return this.IsAdvisorField;
            }
            set {
                if ((this.IsAdvisorField.Equals(value) != true)) {
                    this.IsAdvisorField = value;
                    this.RaisePropertyChanged("IsAdvisor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Phone {
            get {
                return this.PhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.PhoneField, value) != true)) {
                    this.PhoneField = value;
                    this.RaisePropertyChanged("Phone");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ChampionshipData", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class ChampionshipData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PictureField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Picture {
            get {
                return this.PictureField;
            }
            set {
                if ((object.ReferenceEquals(this.PictureField, value) != true)) {
                    this.PictureField = value;
                    this.RaisePropertyChanged("Picture");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartDate {
            get {
                return this.StartDateField;
            }
            set {
                if ((this.StartDateField.Equals(value) != true)) {
                    this.StartDateField = value;
                    this.RaisePropertyChanged("StartDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GameData", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class GameData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int BoardSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MovesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player1_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int Player2Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Player2_NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime StartTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<int> WinnerField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string Winner_NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int BoardSize {
            get {
                return this.BoardSizeField;
            }
            set {
                if ((this.BoardSizeField.Equals(value) != true)) {
                    this.BoardSizeField = value;
                    this.RaisePropertyChanged("BoardSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndTime {
            get {
                return this.EndTimeField;
            }
            set {
                if ((this.EndTimeField.Equals(value) != true)) {
                    this.EndTimeField = value;
                    this.RaisePropertyChanged("EndTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Moves {
            get {
                return this.MovesField;
            }
            set {
                if ((object.ReferenceEquals(this.MovesField, value) != true)) {
                    this.MovesField = value;
                    this.RaisePropertyChanged("Moves");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player1 {
            get {
                return this.Player1Field;
            }
            set {
                if ((this.Player1Field.Equals(value) != true)) {
                    this.Player1Field = value;
                    this.RaisePropertyChanged("Player1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player1_Name {
            get {
                return this.Player1_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Player1_NameField, value) != true)) {
                    this.Player1_NameField = value;
                    this.RaisePropertyChanged("Player1_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Player2 {
            get {
                return this.Player2Field;
            }
            set {
                if ((this.Player2Field.Equals(value) != true)) {
                    this.Player2Field = value;
                    this.RaisePropertyChanged("Player2");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Player2_Name {
            get {
                return this.Player2_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Player2_NameField, value) != true)) {
                    this.Player2_NameField = value;
                    this.RaisePropertyChanged("Player2_Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime StartTime {
            get {
                return this.StartTimeField;
            }
            set {
                if ((this.StartTimeField.Equals(value) != true)) {
                    this.StartTimeField = value;
                    this.RaisePropertyChanged("StartTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<int> Winner {
            get {
                return this.WinnerField;
            }
            set {
                if ((this.WinnerField.Equals(value) != true)) {
                    this.WinnerField = value;
                    this.RaisePropertyChanged("Winner");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Winner_Name {
            get {
                return this.Winner_NameField;
            }
            set {
                if ((object.ReferenceEquals(this.Winner_NameField, value) != true)) {
                    this.Winner_NameField = value;
                    this.RaisePropertyChanged("Winner_Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PlayerGames", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class PlayerGames : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfGamesField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfGames {
            get {
                return this.NumberOfGamesField;
            }
            set {
                if ((this.NumberOfGamesField.Equals(value) != true)) {
                    this.NumberOfGamesField = value;
                    this.RaisePropertyChanged("NumberOfGames");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CityChampionships", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.SerializableAttribute()]
    public partial class CityChampionships : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NumberOfChampionshipsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string City {
            get {
                return this.CityField;
            }
            set {
                if ((object.ReferenceEquals(this.CityField, value) != true)) {
                    this.CityField = value;
                    this.RaisePropertyChanged("City");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NumberOfChampionships {
            get {
                return this.NumberOfChampionshipsField;
            }
            set {
                if ((this.NumberOfChampionshipsField.Equals(value) != true)) {
                    this.NumberOfChampionshipsField = value;
                    this.RaisePropertyChanged("NumberOfChampionships");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TTTService.ITTT", CallbackContract=typeof(Client.TTTService.ITTTCallback), SessionMode=System.ServiceModel.SessionMode.Required)]
    public interface ITTT {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getRegisterFormAdvisorList")]
        void getRegisterFormAdvisorList();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getRegisterFormAdvisorList")]
        System.Threading.Tasks.Task getRegisterFormAdvisorListAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerNewPlayer")]
        void registerNewPlayer(Client.TTTService.PlayerData player, int[] advisors);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerNewPlayer")]
        System.Threading.Tasks.Task registerNewPlayerAsync(Client.TTTService.PlayerData player, int[] advisors);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerNewChampionship")]
        void registerNewChampionship(Client.TTTService.ChampionshipData champ);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerNewChampionship")]
        System.Threading.Tasks.Task registerNewChampionshipAsync(Client.TTTService.ChampionshipData champ);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllUsers")]
        void getAllUsers(string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllUsers")]
        System.Threading.Tasks.Task getAllUsersAsync(string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/login")]
        void login(Client.TTTService.PlayerData user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/login")]
        System.Threading.Tasks.Task loginAsync(Client.TTTService.PlayerData user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/logout")]
        void logout(bool waitingForResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/logout")]
        System.Threading.Tasks.Task logoutAsync(bool waitingForResponse);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/wake")]
        void wake();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/wake")]
        System.Threading.Tasks.Task wakeAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllChampionships")]
        void getAllChampionships(int playerId, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllChampionships")]
        System.Threading.Tasks.Task getAllChampionshipsAsync(int playerId, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerPlayerToChamp")]
        void registerPlayerToChamp(Client.TTTService.PlayerData player, Client.TTTService.ChampionshipData[] chmps);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerPlayerToChamp")]
        System.Threading.Tasks.Task registerPlayerToChampAsync(Client.TTTService.PlayerData player, Client.TTTService.ChampionshipData[] chmps);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/startGameRequest")]
        void startGameRequest(int dim, bool singlePlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/startGameRequest")]
        System.Threading.Tasks.Task startGameRequestAsync(int dim, bool singlePlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/playerPressed")]
        void playerPressed(int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/playerPressed")]
        System.Threading.Tasks.Task playerPressedAsync(int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/playerExitGame")]
        void playerExitGame();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/playerExitGame")]
        System.Threading.Tasks.Task playerExitGameAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllGames")]
        void getAllGames(bool withPlayersNames, int playerId, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getAllGames")]
        System.Threading.Tasks.Task getAllGamesAsync(bool withPlayersNames, int playerId, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getGamePlayers")]
        void getGamePlayers(Client.TTTService.GameData game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getGamePlayers")]
        System.Threading.Tasks.Task getGamePlayersAsync(Client.TTTService.GameData game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getGameAdvisors")]
        void getGameAdvisors(Client.TTTService.GameData game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getGameAdvisors")]
        System.Threading.Tasks.Task getGameAdvisorsAsync(Client.TTTService.GameData game);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getChampionshipPlayers")]
        void getChampionshipPlayers(Client.TTTService.ChampionshipData chmp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getChampionshipPlayers")]
        System.Threading.Tasks.Task getChampionshipPlayersAsync(Client.TTTService.ChampionshipData chmp);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getPlayersGamesNum")]
        void getPlayersGamesNum();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getPlayersGamesNum")]
        System.Threading.Tasks.Task getPlayersGamesNumAsync();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getCitiesChampionshipsNum")]
        void getCitiesChampionshipsNum();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/getCitiesChampionshipsNum")]
        System.Threading.Tasks.Task getCitiesChampionshipsNumAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITTTCallback {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendRegisterFormAdvisorList")]
        void sendRegisterFormAdvisorList(Client.TTTService.PlayerData[] players);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/showException")]
        void showException(System.Exception e);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/showPlayerRegisterSuccess")]
        void showPlayerRegisterSuccess();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendChampionships")]
        void sendChampionships(Client.TTTService.ChampionshipData[] chmps, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/showNewChampSuccess")]
        void showNewChampSuccess();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendPlayers")]
        void sendPlayers(Client.TTTService.PlayerData[] users, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/loginSuccess")]
        void loginSuccess(Client.TTTService.PlayerData user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/logoutSuccess")]
        void logoutSuccess();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/loginError")]
        void loginError(string error, Client.TTTService.PlayerData user);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/logoutError")]
        void logoutError(string error);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/response")]
        void response();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerPlayerToChampSuccess")]
        void registerPlayerToChampSuccess();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/registerPlayerToChampError")]
        void registerPlayerToChampError(string error);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/startGame")]
        void startGame(bool yourTurn);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/gameError")]
        void gameError(string error);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/gameMessage")]
        void gameMessage(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/gameEnded")]
        void gameEnded(string msg);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/opponentPressed")]
        void opponentPressed(int row, int col);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/addedSuccessfully")]
        void addedSuccessfully(bool firstPlayer);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/playerTurn")]
        void playerTurn();
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendGames")]
        void sendGames(Client.TTTService.GameData[] games, string caller);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendGameAdvisors")]
        void sendGameAdvisors(Client.TTTService.PlayerData[] advisors);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendPlayersGamesNum")]
        void sendPlayersGamesNum(Client.TTTService.PlayerGames[] playersGames);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/ITTT/sendCitiesChampionshipsNum")]
        void sendCitiesChampionshipsNum(Client.TTTService.CityChampionships[] citiesChmps);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITTTChannel : Client.TTTService.ITTT, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TTTClient : System.ServiceModel.DuplexClientBase<Client.TTTService.ITTT>, Client.TTTService.ITTT {
        
        public TTTClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TTTClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TTTClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TTTClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TTTClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void getRegisterFormAdvisorList() {
            base.Channel.getRegisterFormAdvisorList();
        }
        
        public System.Threading.Tasks.Task getRegisterFormAdvisorListAsync() {
            return base.Channel.getRegisterFormAdvisorListAsync();
        }
        
        public void registerNewPlayer(Client.TTTService.PlayerData player, int[] advisors) {
            base.Channel.registerNewPlayer(player, advisors);
        }
        
        public System.Threading.Tasks.Task registerNewPlayerAsync(Client.TTTService.PlayerData player, int[] advisors) {
            return base.Channel.registerNewPlayerAsync(player, advisors);
        }
        
        public void registerNewChampionship(Client.TTTService.ChampionshipData champ) {
            base.Channel.registerNewChampionship(champ);
        }
        
        public System.Threading.Tasks.Task registerNewChampionshipAsync(Client.TTTService.ChampionshipData champ) {
            return base.Channel.registerNewChampionshipAsync(champ);
        }
        
        public void getAllUsers(string caller) {
            base.Channel.getAllUsers(caller);
        }
        
        public System.Threading.Tasks.Task getAllUsersAsync(string caller) {
            return base.Channel.getAllUsersAsync(caller);
        }
        
        public void login(Client.TTTService.PlayerData user) {
            base.Channel.login(user);
        }
        
        public System.Threading.Tasks.Task loginAsync(Client.TTTService.PlayerData user) {
            return base.Channel.loginAsync(user);
        }
        
        public void logout(bool waitingForResponse) {
            base.Channel.logout(waitingForResponse);
        }
        
        public System.Threading.Tasks.Task logoutAsync(bool waitingForResponse) {
            return base.Channel.logoutAsync(waitingForResponse);
        }
        
        public void wake() {
            base.Channel.wake();
        }
        
        public System.Threading.Tasks.Task wakeAsync() {
            return base.Channel.wakeAsync();
        }
        
        public void getAllChampionships(int playerId, string caller) {
            base.Channel.getAllChampionships(playerId, caller);
        }
        
        public System.Threading.Tasks.Task getAllChampionshipsAsync(int playerId, string caller) {
            return base.Channel.getAllChampionshipsAsync(playerId, caller);
        }
        
        public void registerPlayerToChamp(Client.TTTService.PlayerData player, Client.TTTService.ChampionshipData[] chmps) {
            base.Channel.registerPlayerToChamp(player, chmps);
        }
        
        public System.Threading.Tasks.Task registerPlayerToChampAsync(Client.TTTService.PlayerData player, Client.TTTService.ChampionshipData[] chmps) {
            return base.Channel.registerPlayerToChampAsync(player, chmps);
        }
        
        public void startGameRequest(int dim, bool singlePlayer) {
            base.Channel.startGameRequest(dim, singlePlayer);
        }
        
        public System.Threading.Tasks.Task startGameRequestAsync(int dim, bool singlePlayer) {
            return base.Channel.startGameRequestAsync(dim, singlePlayer);
        }
        
        public void playerPressed(int row, int col) {
            base.Channel.playerPressed(row, col);
        }
        
        public System.Threading.Tasks.Task playerPressedAsync(int row, int col) {
            return base.Channel.playerPressedAsync(row, col);
        }
        
        public void playerExitGame() {
            base.Channel.playerExitGame();
        }
        
        public System.Threading.Tasks.Task playerExitGameAsync() {
            return base.Channel.playerExitGameAsync();
        }
        
        public void getAllGames(bool withPlayersNames, int playerId, string caller) {
            base.Channel.getAllGames(withPlayersNames, playerId, caller);
        }
        
        public System.Threading.Tasks.Task getAllGamesAsync(bool withPlayersNames, int playerId, string caller) {
            return base.Channel.getAllGamesAsync(withPlayersNames, playerId, caller);
        }
        
        public void getGamePlayers(Client.TTTService.GameData game) {
            base.Channel.getGamePlayers(game);
        }
        
        public System.Threading.Tasks.Task getGamePlayersAsync(Client.TTTService.GameData game) {
            return base.Channel.getGamePlayersAsync(game);
        }
        
        public void getGameAdvisors(Client.TTTService.GameData game) {
            base.Channel.getGameAdvisors(game);
        }
        
        public System.Threading.Tasks.Task getGameAdvisorsAsync(Client.TTTService.GameData game) {
            return base.Channel.getGameAdvisorsAsync(game);
        }
        
        public void getChampionshipPlayers(Client.TTTService.ChampionshipData chmp) {
            base.Channel.getChampionshipPlayers(chmp);
        }
        
        public System.Threading.Tasks.Task getChampionshipPlayersAsync(Client.TTTService.ChampionshipData chmp) {
            return base.Channel.getChampionshipPlayersAsync(chmp);
        }
        
        public void getPlayersGamesNum() {
            base.Channel.getPlayersGamesNum();
        }
        
        public System.Threading.Tasks.Task getPlayersGamesNumAsync() {
            return base.Channel.getPlayersGamesNumAsync();
        }
        
        public void getCitiesChampionshipsNum() {
            base.Channel.getCitiesChampionshipsNum();
        }
        
        public System.Threading.Tasks.Task getCitiesChampionshipsNumAsync() {
            return base.Channel.getCitiesChampionshipsNumAsync();
        }
    }
}
